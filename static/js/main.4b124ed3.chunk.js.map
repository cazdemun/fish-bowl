{"version":3,"sources":["app/Utils.js","app/Routines.jsx","app/App.jsx","index.js"],"names":["probability","n","Math","random","randomInt","mi","ma","min","ceil","max","floor","dateToString","d","ye","Intl","DateTimeFormat","year","format","mo","month","da","day","h","hour","minute","loadRoutines","assign","routines","localStorage","getItem","JSON","parse","DefaultRoutines","saveRoutines","_","event","value","setItem","stringify","message","success","routinesMachine","Machine","id","context","initial","states","start","on","target","actions","idle","EDIT","edit","VISUALIZE","SAVE","OneShotButton","children","onClick","props","useState","used","setUsed","disabled","SwitchState","current","send","style","margin","matches","icon","BorderlessTableOutlined","EditOutlined","SaveButton","Item","textAlign","className","htmlType","SaveOutlined","Routines","drawSlip","name","points","console","log","useMachine","Form","useForm","form","columns","title","dataIndex","key","colSpan","render","align","record","_columns","useEffect","resetFields","isDataAValidJsonArray","Promise","reject","tag","fn","resolve","extra","tableLayout","expandable","indentSize","defaultExpandAllRows","dataSource","initialValues","onFinish","values","data","rules","required","validator","TextArea","autoSize","Header","Layout","Footer","Content","date","Date","newHistory","Array","keys","map","timestamp","now","exp","experience","reduce","acc","x","lastSlip","history","concat","clearContext","bowlMachine","zeroMessage","DRAW","CLEAR","placeholder","defaultValue","Bowl","justifyContent","History","pagination","defaultPageSize","App","offset","span","padding","AppLayout","collapsed","state","setState","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","flex","color","fontWeight","minHeight","overflowY","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.4b124ed3.chunk.js","sourcesContent":["export const probability = n => !!n && Math.random() <= n;\r\n\r\nexport const randomInt = (mi, ma) => {\r\n  const min = Math.ceil(mi);\r\n  const max = Math.floor(ma);\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\nexport const dateToString = d => {\r\n  const ye = new Intl.DateTimeFormat(\"en\", { year: \"numeric\" }).format(d);\r\n  const mo = new Intl.DateTimeFormat(\"en\", { month: \"2-digit\" }).format(d);\r\n  const da = new Intl.DateTimeFormat(\"en\", { day: \"2-digit\" }).format(d);\r\n\r\n  const h = new Intl.DateTimeFormat(\"en\", {\r\n    hour: \"numeric\",\r\n    minute: \"numeric\"\r\n  }).format(d);\r\n\r\n  return `${da}-${mo}-${ye} ${h}`;\r\n};\r\n\r\nexport const tryCatchPromise = (tag, fn) => new Promise((resolve, reject) => {\r\n  try {\r\n    resolve(fn())\r\n  } catch {\r\n    reject(tag)\r\n  }\r\n})\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Card, Button, Table, Input, Form, message } from 'antd';\r\nimport { EditOutlined, SaveOutlined, BorderlessTableOutlined } from '@ant-design/icons';\r\n\r\nimport { Machine, assign } from \"xstate\";\r\nimport { useMachine } from \"@xstate/react\";\r\nimport { tryCatchPromise } from \"./Utils\";\r\n\r\nimport DefaultRoutines from \"../routines.json\"\r\n\r\nconst loadRoutines = assign({\r\n  routines: () => {\r\n    const routines = localStorage.getItem('fish-bowl-routines-raw');\r\n    return routines ? JSON.parse(routines) : DefaultRoutines;\r\n  }\r\n})\r\n\r\nconst saveRoutines = assign({\r\n  routines: (_, event) => {\r\n    const routines = JSON.parse(event.value);\r\n    localStorage.setItem('fish-bowl-routines-raw', JSON.stringify(routines, null, 2)) // stringify again for formatting purposes\r\n    message.success(\"Routines saved!\");\r\n    return routines;\r\n  }\r\n})\r\n\r\nconst routinesMachine = Machine(\r\n  {\r\n    id: \"routines\",\r\n    context: {\r\n      // type Group = { key: String, name: String, children: Boolean }\r\n      // type Routine = { key: String, name: String, points: Boolean } \r\n      // points is the number of slips a routine is worth\r\n      // type Item = Routine | Group\r\n      // routines: List Item\r\n      routines: []\r\n    },\r\n    initial: \"start\",\r\n    states: {\r\n      start: {\r\n        on: {\r\n          '': {\r\n            target: \"idle\",\r\n            actions: [\"loadRoutines\"]\r\n          }\r\n        }\r\n      },\r\n      idle: {\r\n        on: {\r\n          EDIT: {\r\n            target: \"edit\"\r\n          },\r\n        }\r\n      },\r\n      edit: {\r\n        on: {\r\n          VISUALIZE: {\r\n            target: \"idle\"\r\n          },\r\n          SAVE: {\r\n            target: \"idle\",\r\n            actions: [\"saveRoutines\"]\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  {\r\n    actions: { loadRoutines, saveRoutines }\r\n  }\r\n);\r\n\r\nconst OneShotButton = ({ children, onClick, ...props }) => {\r\n  const [used, setUsed] = useState(false)\r\n  return <Button\r\n    disabled={used}\r\n    onClick={() => { setUsed(true); onClick(); }} {...props}>\r\n    {children}\r\n  </Button>\r\n}\r\n\r\nconst _columns = (drawSlip) => [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    colSpan: 3,\r\n    render: (value) => ({\r\n      children: value,\r\n      props: { colSpan: 3 }\r\n    })\r\n  },\r\n  {\r\n    title: 'Points',\r\n    dataIndex: 'points',\r\n    key: 'points',\r\n    colSpan: 2,\r\n    render: (value) => ({\r\n      children: value,\r\n      props: { colSpan: 2, align: \"center\" }\r\n    })\r\n  },\r\n  {\r\n    title: '',\r\n    dataIndex: 'draw',\r\n    key: 'draw',\r\n    render: (_, record) => ({\r\n      children: record.children ? \"\" : <OneShotButton onClick={() => drawSlip(record.name, record.points)}>Draw</OneShotButton>,\r\n      props: { align: \"center\" }\r\n    })\r\n  },\r\n];\r\n\r\nconst SwitchState = ({ current, send }) => <>\r\n  <Button\r\n    style={{ margin: \"0\" }}\r\n    disabled={current.matches('idle')}\r\n    onClick={() => send('VISUALIZE')}\r\n    icon={<BorderlessTableOutlined />} />\r\n  <Button\r\n    style={{ margin: \"0\" }}\r\n    disabled={current.matches('edit')}\r\n    onClick={() => send('EDIT')}\r\n    icon={<EditOutlined />} />\r\n</>\r\n\r\nconst SaveButton = () =>\r\n  <Form.Item style={{ textAlign: 'right' }}>\r\n    <Button\r\n      className=\"bg-secondary btn-fix\"\r\n      htmlType=\"submit\"\r\n      icon={<SaveOutlined />}>\r\n      Save\r\n  </Button>\r\n  </Form.Item>\r\n\r\nconst Routines = ({ drawSlip = (name, points) => { console.log(\"Not implemented!\", name, points) } }) => {\r\n  const [current, send] = useMachine(routinesMachine);\r\n  const [form] = Form.useForm();\r\n  const columns = _columns(drawSlip);\r\n\r\n  // Forces the formatted string to reload\r\n  useEffect(() => {\r\n    if (current.matches('edit'))\r\n      form.resetFields();\r\n  }, [current.value, current, form])\r\n\r\n  // Checks if data in TextArea is a valid JSON array\r\n  const isDataAValidJsonArray = (_, value) => {\r\n    if (value === \"\")\r\n      return Promise.reject()\r\n    return tryCatchPromise(\"Invalid JSON!\", () => JSON.parse(value))\r\n  }\r\n\r\n  return <Card title=\"Routines\" extra={<SwitchState current={current} send={send} />}>\r\n    {(() => {\r\n      switch (current.value) {\r\n        case 'idle':\r\n          return <Table\r\n            tableLayout=\"fixed\"\r\n            expandable={{ indentSize: 4, defaultExpandAllRows: true }}\r\n            columns={columns}\r\n            dataSource={current.context.routines} />\r\n        case 'edit':\r\n          return < Form name=\"routines\"\r\n            form={form}\r\n            initialValues={{ 'data': JSON.stringify(current.context.routines, null, 2) }}\r\n            onFinish={(values) => send('SAVE', { value: values.data })}>\r\n            <SaveButton />\r\n            <Form.Item name='data'\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: 'Please input an array of objects in JSON format!'\r\n                },\r\n                { validator: isDataAValidJsonArray }\r\n              ]}>\r\n              <Input.TextArea autoSize />\r\n            </Form.Item>\r\n            <SaveButton />\r\n          </Form >\r\n        default:\r\n          break;\r\n      }\r\n    })()}\r\n  </Card >\r\n}\r\n\r\nexport default Routines;","import React, { useState } from \"react\";\r\nimport { Layout, Row, Card, Button, Table, Col, Input, Divider } from 'antd';\r\nimport { MenuUnfoldOutlined, MenuFoldOutlined } from '@ant-design/icons';\r\nimport Routines from \"./Routines.jsx\";\r\n\r\nimport { Machine, assign } from \"xstate\";\r\nimport { useMachine } from \"@xstate/react\";\r\nimport { probability, randomInt, dateToString } from \"./Utils.js\";\r\n\r\nconst { Header, Footer, Content } = Layout;\r\n\r\nconst randomExp = () => {\r\n  if (probability(0.45))\r\n    return 0;\r\n  if (probability(0.95))\r\n    return randomInt(1, 21);\r\n  return 100;\r\n};\r\n\r\nconst drawSlip = assign((context, event) => {\r\n  // points is the number of slips a routine is worth\r\n  const { name, points } = event.value;\r\n  const date = new Date();\r\n  const newHistory = [...Array(points).keys()]\r\n    .map(_ => ({\r\n      key: randomInt(1, 1000000),\r\n      timestamp: Date.now(),\r\n      date: dateToString(date),\r\n      name: name,\r\n      exp: randomExp(),\r\n    }))\r\n\r\n  return points === 0 ? {} : {\r\n    experience: context.experience + newHistory.reduce((acc, x) => acc + x.exp, 0),\r\n    lastSlip: newHistory[points - 1].exp,\r\n    history: context.history.concat(newHistory)\r\n  }\r\n})\r\n\r\nconst clearContext = assign((context, event) => {\r\n  return {\r\n    experience: 0,\r\n    lastSlip: 0,\r\n    history: []\r\n  }\r\n})\r\n\r\nconst bowlMachine = Machine(\r\n  {\r\n    id: \"bowl\",\r\n    context: {\r\n      experience: 0,\r\n      zeroMessage: \"Keep up the good work!\",\r\n      // type Slip = { key: Number, timestamp: UNIXTimestamp, date: String, name: String , exp: Number }\r\n      // history: List Slip\r\n      lastSlip: 0,\r\n      history: []\r\n    },\r\n    initial: \"idle\",\r\n    states: {\r\n      idle: {\r\n        on: {\r\n          DRAW: {\r\n            target: \"idle\",\r\n            actions: ['drawSlip']\r\n          },\r\n          CLEAR: {\r\n            target: \"idle\",\r\n            actions: ['clearContext']\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  {\r\n    actions: { drawSlip, clearContext }\r\n  }\r\n);\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Date',\r\n    dataIndex: 'date',\r\n    key: 'date',\r\n  },\r\n  {\r\n    title: 'Routine',\r\n    dataIndex: 'name',\r\n    key: 'name',\r\n    render: (_, record) => record.name === \"\" ? <Input placeholder='Enter routine name' defaultValue={record.name} /> : record.name\r\n  },\r\n  {\r\n    title: 'Experience',\r\n    dataIndex: 'exp',\r\n    key: 'exp',\r\n    render: (_, record) => record.exp === 0 ? \"Keep up the Good Work!\" : record.exp\r\n  }\r\n]\r\n\r\nconst Bowl = ({ current, send }) => <Card title=\"Bowl\">\r\n  <div style={{ textAlign: \"center\" }}>\r\n    <h1>Current exp:</h1>\r\n    <p>{current.context.experience}</p>\r\n    <h1>Last slip:</h1>\r\n    <p>{current.context.lastSlip === 0 ? current.context.zeroMessage : current.context.lastSlip}</p>\r\n    <Row style={{ justifyContent: \"center\" }}>\r\n      <Button className=\"bg-secondary btn-fix\"\r\n        onClick={() => send('DRAW', { value: { name: \"\", points: 1 } })}>\r\n        Draw a slip!\r\n      </Button>\r\n      <Button className=\"bg-secondary btn-fix\"\r\n        onClick={() => send('CLEAR')}>\r\n        Clear\r\n      </Button>\r\n    </Row>\r\n  </div>\r\n</Card>\r\n\r\nconst History = ({ current }) =>\r\n  <Card title=\"History\">\r\n    <Table tableLayout=\"fixed\" pagination={{ defaultPageSize: 9 }} columns={columns} dataSource={current.context.history} />\r\n  </Card>\r\n\r\nconst App = () => {\r\n  const [current, send] = useMachine(bowlMachine);\r\n\r\n  return <Row offset={4 / 2} span={20} >\r\n    <Col span={15}>\r\n      <Routines drawSlip={(name, points) => send('DRAW', { value: { name: name, points: points } })} />\r\n      <Divider />\r\n    </Col>\r\n    <Col span={9} style={{ padding: \"0px 10px\" }}>\r\n      <Bowl current={current} send={send} />\r\n      <Divider />\r\n      <History current={current} />\r\n      <Divider />\r\n    </Col>\r\n  </Row >\r\n}\r\n\r\nconst AppLayout = () => {\r\n  const [state, setState] = useState({ collapsed: false });\r\n\r\n  return (\r\n    <Layout className=\"site-layout\">\r\n      <Header className=\"site-layout-background\" style={{ padding: 0 }}>\r\n        {React.createElement(state.collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\r\n          className: 'trigger',\r\n          onClick: () => setState({ collapsed: !state.collapsed }),\r\n        })}\r\n        <h1 style={{ flex: \"1\", color: \"white\", fontWeight: \"bold\", textAlign: \"center\" }}>Fish Bowl (Beta)</h1>\r\n      </Header>\r\n      <Content\r\n        style={{\r\n          padding: 24,\r\n          minHeight: 280,\r\n          overflowY: \"auto\"\r\n        }}\r\n      >\r\n        <App />\r\n      </Content>\r\n      <Footer style={{ textAlign: \"right\", fontWeight: \"bold\" }}>Created by cazdemun</Footer>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default AppLayout;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\n// import \"./tailwind.generated.css\";\r\n// import \"./tailwind.extras.css\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./app/App\";\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n    <App />,\r\n  // </React.StrictMode>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}